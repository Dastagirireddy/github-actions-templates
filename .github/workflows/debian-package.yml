name: Debian Package CI

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      go_version:
        required: false
        type: string
        default: '1.21'
      apt_repo:
        required: true
        type: string
      distribution:
        required: false
        type: string
        default: 'stable'
      component:
        required: false
        type: string
        default: 'main'
    secrets:
      gpg_passphrase:
        required: true
        description: GPG passphrase for signing packages
      gpg_private_key:
        required: true
        description: GPG private key for signing packages (ASCII-armored)
      gpg_public_key:
        required: true
        description: GPG public key (ASCII-armored)
      repo_token:
        required: true
        description: Token for repository access (GitHub token)
      personal_access_token:
        required: true
        description: Personal Access Token for accessing private repositories

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Checkout templates repository
        uses: actions/checkout@v4
        with:
          repository: Dastagirireddy/github-actions-templates
          path: templates
          token: ${{ secrets.repo_token }}
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}
          
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential fakeroot dpkg-dev gnupg2
          
      - name: Make scripts executable
        run: |
          mkdir -p scripts
          cp templates/scripts/*.sh scripts/
          chmod +x scripts/*.sh
      - run: |
          ./scripts/setup-gpg.sh \
            "Dastagirireddy" \
            "dastagirireddy99.r@gmail.com" \
            "${{ secrets.gpg_passphrase }}"
        env:
          GNUPGHOME: /tmp/gnupg
      - run: |
          ./scripts/build-deb.sh "${{ inputs.app_name }}"
        env:
          VERSION: ${{ github.ref_name }}
      - uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: build/deb/*.deb
      - name: Import GPG keys
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p /tmp/gnupg
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gnupg/private.asc
          echo "${{ secrets.GPG_PUBLIC_KEY }}" > /tmp/gnupg/public.asc
          gpg --import /tmp/gnupg/private.asc
          gpg --import /tmp/gnupg/public.asc
          
      - name: Update APT repository
        if: startsWith(github.ref, 'refs/tags/')
        env:
          REPO_URL: https://${{ secrets.personal_access_token }}@github.com/${{ inputs.apt_repo }}.git
        run: |
          # Configure git user
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Clone the repository using PAT
          git clone $REPO_URL apt-repo
          
          cd apt-repo
          
          # Create directory structure and copy package
          mkdir -p pool/${{ inputs.distribution }}/${{ inputs.component }}
          cp ../build/deb/*.deb pool/${{ inputs.distribution }}/${{ inputs.component }}/
          
          # Update repository metadata
          apt-ftparchive packages . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          
          # Sign the repository
          gpg --clearsign -o InRelease Release
          gpg -abs -o Release.gpg Release
          
          # Commit and push changes
          git add .
          git commit -m "Add ${{ inputs.app_name }} ${{ github.ref_name }}" || echo "No changes to commit"
          git push $REPO_URL main
