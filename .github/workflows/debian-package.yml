name: Debian Package CI

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      go_version:
        required: false
        type: string
        default: '1.25'
      apt_repo:
        required: true
        type: string
        default: 'Dastagirireddy/nuboxi-apt-repo'
      distribution:
        required: false
        type: string
        default: 'stable'
      component:
        required: false
        type: string
        default: 'main'
    secrets:
      personal_access_token:
        required: true
        description: Personal Access Token for accessing private repositories

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version detection from git tags

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential fakeroot dpkg-dev gnupg2

      - name: Prepare build environment
        run: |
          # Create scripts directory if it doesn't exist
          mkdir -p scripts
          
          # Copy scripts from the repository
          cp -r ./scripts/*.sh ./ || true
          
          # Make scripts executable
          chmod +x ./scripts/*.sh
          
      - name: Build Debian package
        run: |
          # Build the package
          ./scripts/build-deb.sh "${{ inputs.app_name }}"
          
          # Verify the .deb file was created
          echo "Built package:"
          ls -la build/deb/*.deb
          
          # Create packages directory if it doesn't exist
          mkdir -p packages
          
          # Move the .deb file to the packages directory
          mv build/deb/*.deb packages/
          
          # Verify the file was moved
          echo "Package moved to:"
          ls -la packages/
        env:
          VERSION: ${{ github.ref_name }}
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 0

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: packages/*.deb
          if-no-files-found: error
          retention-days: 17

  update-apt-repo:
    name: Update APT Repository
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Initialize APT repository
        run: |
          mkdir -p apt-repo
          cd apt-repo
          git init
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git remote add origin https://${{ secrets.personal_access_token }}@github.com/${{ inputs.apt_repo }}.git
          git fetch --depth=1 origin main || true  # Ignore if branch doesn't exist yet
          git checkout -b main || git checkout -b main  # Create or switch to main branch

      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: packages

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev gnupg2 git

      - name: Setup GPG Key
        run: |
          # Create GPG directory and set permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Create GPG config
          cat > ~/.gnupg/gpg.conf <<EOL
          use-agent
          pinentry-mode loopback
          EOL

          # Generate a new GPG key non-interactively
          cat > /tmp/gpg-batch <<EOL
          %no-protection
          Key-Type: RSA
          Key-Length: 4096
          Subkey-Type: RSA
          Subkey-Length: 4096
          Name-Real: ${{ inputs.app_name }} Repository
          Name-Email: noreply@${{ inputs.app_name }}.com
          Expire-Date: 0
          %commit
          EOL

          gpg --batch --generate-key /tmp/gpg-batch

          # Export the public key
          mkdir -p apt-repo
          KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^fpr' | cut -d: -f10 | head -n1)
          gpg --armor --export $KEY_ID > apt-repo/KEY.gpg

          echo "GPG key generated and exported to apt-repo/KEY.gpg"
          echo "Key ID: $KEY_ID"
          echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV

      - name: Add package to repository
        working-directory: apt-repo
        run: |
          # Ensure pool/main directory exists
          mkdir -p pool/main
          
          # Copy the package to the pool
          find ../packages -name '*.deb' -exec cp -v {} pool/main/ \;
          
          # Create required directories for each architecture
          for arch in amd64; do  # Simplified to just amd64 for now
            mkdir -p dists/${{ inputs.distribution }}/main/binary-$arch
          done
          
          # Generate Packages files for each architecture
          for arch in amd64; do
            echo "Processing architecture: $arch"
            (cd pool/main && \
             dpkg-scanpackages --arch $arch . /dev/null > ../../dists/${{ inputs.distribution }}/main/binary-$arch/Packages && \
             gzip -9c ../../dists/${{ inputs.distribution }}/main/binary-$arch/Packages > ../../dists/${{ inputs.distribution }}/main/binary-$arch/Packages.gz)
          done
          
          # Generate Release file
          cd dists/${{ inputs.distribution }}
          apt-ftparchive release . > Release
          
          # Sign the Release file
          gpg --batch --armor --detach-sign -o Release.gpg Release
          gpg --batch --clearsign -o InRelease Release
          
          cd ../../

      - name: Commit and push changes
        working-directory: apt-repo
        env:
          GIT_AUTHOR_NAME: "GitHub Actions"
          GIT_AUTHOR_EMAIL: "actions@github.com"
          GIT_COMMITTER_NAME: "GitHub Actions"
          GIT_COMMITTER_EMAIL: "actions@github.com"
        run: |
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Add all files
          git add .
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            echo "Committing changes..."
            git commit -m "Update repository with new package version ${{ github.ref_name }}"
            
            # Set the remote URL with the token
            REPO_URL="https://x-access-token:${{ secrets.personal_access_token }}@github.com/${{ inputs.apt_repo }}.git"
            git remote set-url origin "$REPO_URL"
            
            # Push changes
            git push -u origin main --force
            echo "Changes pushed successfully!"
          else
            echo "No changes to commit"
          fi
