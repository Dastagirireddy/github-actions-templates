name: Debian Package CI

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      go_version:
        required: false
        type: string
        default: '1.25'
      apt_repo:
        required: true
        type: string
        default: 'Dastagirireddy/nuboxi-apt-repo'
      distribution:
        required: false
        type: string
        default: 'stable'
      component:
        required: false
        type: string
        default: 'main'
      arch:
        required: false
        type: string
        default: 'arm64'
    secrets:
      personal_access_token:
        required: true
        description: Personal Access Token for accessing private repositories
      gpg_private_key:
        required: true
        description: Private GPG key for signing the repository

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go_version }}

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential fakeroot dpkg-dev gnupg2

      - name: Checkout templates repository
        uses: actions/checkout@v4
        with:
          repository: Dastagirireddy/github-actions-templates
          path: .github/actions-templates
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup build environment
        run: |
          mkdir -p scripts
          cp .github/actions-templates/scripts/*.sh scripts/
          chmod +x scripts/*.sh
          ls -la scripts/

      - name: Build Debian package
        run: |
          scripts/build-deb.sh "${{ inputs.app_name }}" "${{ inputs.arch }}"
          mkdir -p packages
          mv build/deb/*.deb packages/
          ls -la packages/
        env:
          VERSION: ${{ github.ref_name }}
          GOOS: linux
          GOARCH: ${{ inputs.arch }}
          CGO_ENABLED: 0

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: packages/*.deb
          if-no-files-found: error
          retention-days: 17

  update-apt-repo:
    name: Update APT Repository
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Initialize APT repository
        run: |
          mkdir -p apt-repo
          cd apt-repo
          git init
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git remote add origin "https://x-access-token:${{ secrets.personal_access_token }}@github.com/${{ inputs.apt_repo }}.git"
          git fetch origin main || true
          git checkout -B main origin/main || git checkout -b main

      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: packages

      - name: Setup dependencies
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev gnupg2 git

      - name: Import GPG Private Key
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
          KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^fpr' | cut -d: -f10 | head -n1)
          echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
        env:
          GPG_PRIVATE_KEY: ${{ secrets.gpg_private_key }}

      - name: Add package to repository
        working-directory: apt-repo
        run: |
          mkdir -p pool/main
          find ../packages -name '*.deb' -exec cp -v {} pool/main/ \;

          # Build Packages files
          for arch in amd64 arm64; do
            mkdir -p dists/${{ inputs.distribution }}/main/binary-$arch
            dpkg-scanpackages --arch $arch pool/main /dev/null > dists/${{ inputs.distribution }}/main/binary-$arch/Packages
            gzip -k -9 dists/${{ inputs.distribution }}/main/binary-$arch/Packages
          done

          cd dists/${{ inputs.distribution }}

          # Generate apt-ftparchive.conf for proper fields
          cat > apt-ftparchive.conf <<EOF
  APT
  {
    FTPArchive
    {
      Codename "${{ inputs.distribution }}";
    Suite "${{ inputs.distribution }}";
    Components "${{ inputs.component }}";
    Architectures "amd64 arm64";
      Origin "Nuboxi";
      Label "Nuboxi Package Repository";
    };
  };
  EOF
  
  # Generate Release file
  apt-ftparchive -c apt-ftparchive.conf release . > Release
  
  # Sign Release
  gpg --batch --armor --detach-sign -o Release.gpg Release
  gpg --batch --clearsign -o InRelease Release

- name: Commit and push changes
  working-directory: apt-repo
  env:
    GIT_AUTHOR_NAME: "GitHub Actions"
    GIT_AUTHOR_EMAIL: "actions@github.com"
    GIT_COMMITTER_NAME: "GitHub Actions"
    GIT_COMMITTER_EMAIL: "actions@github.com"
    PERSONAL_ACCESS_TOKEN: ${{ secrets.personal_access_token }}
  run: |
    git add .
    if ! git diff --staged --quiet; then
      git commit -m "Update repository with new package version ${{ github.ref_name }}"
      git push -u origin main --force-with-lease
    else
      echo "No changes to commit"
